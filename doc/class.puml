@startuml
top to bottom direction
package javax.servlet{
    package http{
        class Httpservlet
        class HttpServletRequest
        class HttpServletResponse
    }
    package filter{
        interface Filter{
            ~ doFilter(request:ServletRequest,response:ServletResponse,chain:FilterChain):void
        }
    }
}

package web{
    class WebApplicationController{
        + getRequest(request:Object):RequestContext
        + handleRequest(request:RequestContext):ResponseContext
        + handleResponse(request:RequestContext,response:ResponseContext)
    }
    class LoginFilter{
        ~ doFilter(req:HttpRequest,res:HttpResponse,chain:FilterChain):void
    }
    class FrontServlet{
        # service(req:HttpServletRequest,resp:HttpServletResponse):void
    }
    package context{
        class HttpRequestContext{
            - req:HttpservletRequest
            + setAttribute(key:String,value:Object):void
            + setId(id:String):void
            + getId():String
        }
        class HttpResponseContext{
            - res:HttpServletResponse
            + forward(url:String,RequestContext):void
        }
    }
    WebApplicationController <.. FrontServlet
    package util{
        class methodChecker{
            + {static} check(req:HttpServletRequest):boolean
        }
    }
}

package frame{

    package exception{
        note "404" as e404
        class NotFoundException{
            + NotFoundException(msg:String):NotFoundException
        }
        NotFoundException . e404
        note "405" as e405
        class MethodNotAllowedException{
            + MethodNotAllowedException(msg:String):MethodNotAllowedException
        }
        MethodNotAllowedException . e405
        note "400" as e400
        class BadRequestException{
            + (msg:String):BadRequestException
        }
        BadRequestException . e400
    }
    interface ApplicationController{
        + getRequest(request:Object):RequestContext
        + handleRequest(request:RequestContext):ResponseContext
        + handleResponse(request:RequestContext,response:ResponseContext)
    }
    ApplicationController ..> RequestContext
    ApplicationController ..> ResponseContext
    abstract class ServiceFactory{
        + {static} getSevice(req:RequestContext):Service
    }
    ServiceFactory .> Service
    package context{
        interface RequestContext{
            + setAttribute(key:String,value:Onject)
            + getParameter(key:String):String[]
            + setId(key:UserId):void
            + getId():String
        }
        interface ResponseContext{
            + forward(url:String,RequestContext)
            + getWtite():PrintWriter
        }
    }
    package util{
        class hash{
            + {static} getSha256(String:value):byte[]
        }
    }
}
    

    package db{
        package dao{
            abstract class dao{
                - cn:Connection
                - getConnection():void
                + close():void
            }
            class UserInfoDao{
                + selectScore(id:String):int
                + selectPassword(id:String):byte[]
                + insert(user:UserBean):void
                + updatePassword(user:UserBean):void
                + updateScore(user:UserBean):void
            }
            class QuizDao{
                + selectNewQuiz(genre:String):ArrayList<QuizBean>
                + selectFavoriteQuiz(userId:String):ArrayList<QuizBean>
            }
            class AnswerHistoryDao{
                + selectAnswerHistory(userId:String):ArrayList
            }

            class GenreDao{
                + selectGenre():ArrayList<String>
            }

            dao <|-- QuizDao
            dao <|-- UserInfoDao

        }
        package bean{
            class UserBean{
                - id:String
                - password:byte[]
                + UserBean()
                + UserBean(id:String,password:byte[])
                + setId(id:String):void
                + setPassword(password:byte[]):void
            }
            class QuizBean {
                - quiz_id : int
                - author_id : String
                - title : String
                - genre : String
                - explanation : String
                - create_time : String

                + getQuiz_id() : int
                + setQuiz_id(quiz_id : int) : void
                + getAuthor_id() : String
                + setAuthor_id(author_id : String) : void
                + getTitle() : String
                + setTitle(title : String) : void
                + getGenre() : String
                + setGenre(genre : String) : void
                + getExplanation() : String
                + setExplanation(explanation : String) : void
                + getCreate_time() : String
                + setCreate_time(create_time : String) : void
            }
            class AnswerHistoryBean {
                - clearTime : String
                - clearQuiz : QuizBean

                + getClearTime() : String
                + setClearTime(clearTime : String) : void
                + getClearQuiz() : QuizBean
                + setClearQuiz(clearQuiz : QuizBean) : void
            }
        }
        QuizBean *-- AnswerHistoryBean
        UserInfoDao ..> UserBean
        QuizDao ..> QuizBean
    }
package quizoo{
    package service{
        abstract class Service{
            + do(req:RequestContext,resResponseContext):void
        }
        class Login{
            + do(req:RequestContext,resResponseContext):void
        }
        class Logout{
            + do(req:RequestContext,res:ResponseContext):void
        }
        class QuizList{
            + do(req:RequestContext,res:ResponseContext):void
        }
        class QuizDetail{
            + do(req:RequestContext,res:ResponseContext):void
        }
        class SubmitAnswer{
            + do(req:RequestContext,res:ResponseContext):void
        }
        class AnswerHistory{
            + do(req:RequestContext,res:ResponseContext):void
        }
        class HistoryList{
            + do(req:RequestContext,res:ResponseContext):void
        }
        class Create{
            + do(req:RequestContext,res:ResponseContext):void
        }
        class CreateHistory{
            + do(req:RequestContext,res:ResponseContext):void
        }

        Service <|-- Login
        Service <|-- Logout
        Service <|-- QuizList
        Service <|-- QuizDetail
        Service <|-- SubmitAnswer
        Service <|-- AnswerHistory
        Service <|-- HistoryList
        Service <|-- Create
        Service <|-- CreateHistory
        RequestContext <.. Service
        RequestContext <.. Login
        RequestContext <.. Logout
        RequestContext <.. QuizList
        RequestContext <.. QuizDetail
        RequestContext <.. SubmitAnswer
        RequestContext <.. AnswerHistory
        RequestContext <.. HistoryList
        RequestContext <.. Create
        RequestContext <.. CreateHistory
        ResponseContext <.. Service
        ResponseContext <.. Login
        ResponseContext <.. Logout
        ResponseContext <.. QuizList
        ResponseContext <.. QuizDetail
        ResponseContext <.. SubmitAnswer
        ResponseContext <.. AnswerHistory
        ResponseContext <.. HistoryList
        ResponseContext <.. Create
        ResponseContext <.. CreateHistory
    }
}
HttpServletRequest <-- HttpRequestContext
HttpServletResponse <-- HttpResponseContext
ResponseContext <.. HttpResponseContext
RequestContext <.. HttpRequestContext
Httpservlet <|-- FrontServlet
ApplicationController <|.. WebApplicationController
WebApplicationController ..> RequestContext
WebApplicationController ..> ResponseContext
WebApplicationController ..> Service
WebApplicationController ..> ServiceFactory
LoginFilter ..|> Filter

@enduml