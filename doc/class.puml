@startuml
' !theme carbon-gray
top to bottom direction
' left to right direction
package javax.servlet{
    package http{
        class Httpservlet
        class HttpServletRequest
        class HttpServletResponse
    }
    package filter{
        interface Filter{
            ~ doFilter(request:ServletRequest,response:ServletResponse,chain:FilterChain):void
        }
    }
}

package web{
    class WebApplicationController{
        + getRequest(request:Object):RequestContext
        + handleRequest(request:RequestContext):ResponseContext
        + handleResponse(request:RequestContext,response:ResponseContext)
    }
    class LoginFilter{
        + destroy():void
        + doFilter(req:HttpRequest,res:HttpResponse,chain:FilterChain):void
        + init(filterConfig:FilterConfig):void
    }
    class FrontServlet{
        # service(req:HttpServletRequest,resp:HttpServletResponse):void
    }
    namespace web.context{
        class HttpRequestContext{
            - req:HttpservletRequest
            + setAttribute(key:String,value:Object):void
            + setId(id:String):void
            + getId():String
            + getMessageBody():String
        }
        class HttpResponseContext{
            - res:HttpServletResponse
            + forward(url:String,RequestContext):void
        }
    }

    package util{
        class AllowedMethods {
            + GET:ArrayList<String>
            + POST:ArrayList<String>
            + setGet(get:ArrayList<String>):void
            + getPost():ArrayList<String>
            + setPost(post:ArrayList<String>):void
        }
        class MethodChecker{
            + {static} check(req:HttpServletRequest):boolean
        }
        class ServiceInfo {
            - name:String
            - allowedMethods:List<String>
            - servicClass:String
            + getName():String
            + setName(name:String):void
            + getAllowedMethods():List<String>
            + setAllowedMethods(allowedMethods:List<String>):void
            + getServiceClass():String
            + setServiceClass(serviceClass:String):void
        }
        class ServiceManager {
            - {static} services:HashMap<String, ServiceInfo>
            - {static} webjson:String = "C:/repos/QuiZoo/quizoo/src/main/webapp/WEB-INF/web.json"
            + {static} get(name:String):serviceInfo
        }
    }
    namespace web.exception {
        class MethodNotAllowedException {
            + MethodNotAllowedException(msg:String, e:Exception)
        }
    }
    ApplicationController <|.. WebApplicationController
        
}

package frame{

    package exception{
        note "404" as e404
        class NotFoundException{
            + NotFoundException()
            + NotFoundException(msg:String)
            + NotFoundException(msg:String, e:Exception)
        }
        NotFoundException . e404
        note "400" as e400
        class BadRequestException{
            + BadRequestException(msg:String)
            + BadRequestException(msg:String, e:Exception)
        }
        BadRequestException . e400
        note "500" as e500
        class ResourceException {
            + ResourceException(msg:String, e:Exception)
        }
        ResourceException . e500
    }

    interface ApplicationController{
        + getRequest(request:Object):RequestContext
        ~ getResponse(response:Object):void
        + handleResponse(request:RequestContext,response:ResponseContext):void
    }
    abstract class ServiceFactory{
        + {static} getSevice(file:InputStream, req:RequestContext):Service
    }
    abstract Service{
        + {abstract} execute(req:RequestContext, res:ResponseContext):void
    }
    package util {
        class Hash {
            + {static} getHashedBytes(pass:String):byte[]
            + {static} getHashedString(pass:String):String
        }
    }
    namespace frame.context{
        interface RequestContext{
            + setAttribute(key:String,value:Onject)
            + getParameter(key:String):String[]
            + setUser(user:UserInfoBean):void
            + invalidatekeUser():void
            + getMessageBody():String
            + getTargetServiceKey():String
        }
        interface ResponseContext{
            + forward(url:String, requestContext:RequestContext)
            + getWtite():PrintWriter
            + redirect(url:String):void
        }
    }
    FrontServlet ..> ApplicationController
    frame.context.RequestContext <.. ApplicationController
    frame.context.ResponseContext <. ApplicationController
    frame.context.RequestContext <. Service
    frame.context.ResponseContext <. Service
    frame.context.RequestContext <. ServiceFactory
    frame.context.RequestContext <|.. web.context.HttpRequestContext
    frame.context.ResponseContext <|.. web.context.HttpResponseContext
}

frame.context.RequestContext <.. FrontServlet
frame.context.ResponseContext <.. FrontServlet

package db{
    package dao{
        abstract class Dao{
            # cn:Connection
            # st:PreparedStatement
            # rs:ResultSet
            # connect():void throws ResourceException
            # close():void throws ResourceException
        }
        class UserInfoDao{
            + selectUser(userId:String):UserInfoBean
            + insertUser(user:UserInfoBean):void
            + selectSearchedUserByUserId(user_id:String):UserInfoBean
            + deleteUser(userId:String):void
            + updatePassword(user_id:String,password:String):void
            + updateScore(userNo:int,answered:int,correct:int):void
            + updateNickName(userNo:int, nickname:String):void
            + selectNickname(userNo:int):String
        }
        class QuizDao{
            + selectQuiz(orderColumn:String, genreNo:String, seachStr:String):ArrayList<QuizBean>
            + selectSearchedQuizByQuizId(quizId:int):QuizBean
            + insertQuiz(quiz:QuizBean):void
            + deleteQuiz(quizId:int, userNo:int):void
            + updateTitle(quizId:int,title:String):void
            + updateGenre(quizId:int,genreNo:int):void
            + updateExplanation(quizId:int,explanation:String):void
        }
        class QuizQuestionDao{
            + selectQuizWithQuestion(quizid:int):QuizQuestionBean
            + insertQuizQuestion(user_no:int, quizQuestionBean:QuizQuestionBean):void
            - byteToBooleanArray(b:byte):boolean[]
            - booleanArrayToByte(boolArray:boolean[])
        }
        class AnswerHistoryDao{
            + selectAnswerHistory(userNo:int):ArrayList<AnswerhistoryBean>
            + insertAnswerHistory(userNo:int, quizId:int, correctCount:int):void
        }
        class GenreDao{
            + selectGenres():ArrayList<GenreBean>
        }
        class CreateHistoryDao {
            + selectCreateHistory(userNo:int):ArrayList<CreateHistoryBean>
        }

        Dao <|-- UserInfoDao
        Dao <|-- QuizDao
        Dao <|-- QuizQuestionDao
        Dao <|-- AnswerHistoryDao
        Dao <|-- GenreDao
        Dao <|-- CreateHistoryDao

    }

    package bean {
        class UserInfoBean {
            - userId: String
            - userNo: int = -1
            - nickname: String
            - password: String
            - totalAnswer: int
            - correctAnswer: int = -1
            - rating: float = -1.0f
            + UserInfoBean()
            + UserInfoBean(all fields as parameters)
            + Accessors (getters & setters)
        }

        class QuizBean {
            - quizId: int
            - authorNo: int
            - authorNickname: String
            - title: String
            - questionCount: int
            - genreNo: int
            - genre: String
            - explanation: String
            - createTime: String
            - correctRate: float
            - totalParticipants: int
            - deleted: boolean
            + QuizBean()
            + QuizBean(all fields as parameters)
            + Accessors (getters & setters)
        }

        class QuestionBean {
            - quizId: int
            - questionId: int
            - question: String
            - choice1: String
            - choice2: String
            - choice3: String
            - choice4: String
            - judge: boolean[]
            + QuestionBean()
            + QuestionBean(all fields as parameters)
            + Accessors (getters & setters)
            + toString():String
        }

        class QuizQuestionBean {
            - quiz: QuizBean
            - question: ArrayList<QuestionBean>
            + QuizQuestionBean()
            + QuizQuestionBean(all fields as parameters)
            + Accessors (getters & setters)
        }

        class AnswerhistoryBean {
            - answeredTime: String
            - questionCount: int
            - correctCount: int
            - quizbean: QuizBean
            + AnswerhistoryBean()
            + AnswerhistoryBean(all fields as parameters)
            + Accessors (getters & setters)
        }

        class CreateHistoryBean {
            - title: String
            - explanation: String
            - genre: String
            - correctRate: float
            - questionCount: int
            + CreateHistoryBean()
            + CreateHistoryBean(all fields as parameters)
            + Accessors (getters & setters)
        }

        class GenreBean {
            - genre_no: int
            - genre_title: String
            + GenreBean()
            + GenreBean(all fields as parameters)
            + Accessors (getters & setters)
        }
        QuizQuestionBean .left.> QuestionBean
        QuizQuestionBean .right.> QuizBean
    }

    java.io.Serializable <|.. bean
    UserInfoDao ..> UserInfoBean
    QuizDao ..> QuizBean
    QuizQuestionDao ..> QuizBean
    QuizQuestionDao ..> QuestionBean
    QuizQuestionDao ..> QuizQuestionBean
    AnswerHistoryDao ..> AnswerhistoryBean
    CreateHistoryDao ..> CreateHistoryBean
    GenreDao ..> GenreBean
}
package quizoo{

    package getter{
        package getter.ajax {
            class AnswerHistoryGetter {
                execute(req:RequestContext,resResponseContext):void
            }
            class CreateHistoryGetter {
                execute(req:RequestContext,resResponseContext):void
            }
            class GenreGetter {
                execute(req:RequestContext,resResponseContext):void
            }
            class NicknameGetter {
                execute(req:RequestContext,resResponseContext):void
            }
            class QuizListGetter {
                - {static} paramColMap:HashMap<String, String>
                execute(req:RequestContext,resResponseContext):void
            }
            class QuizQuestionGetter {
                execute(req:RequestContext,resResponseContext):void
            }
            class UserIdChecker {
                execute(req:RequestContext,resResponseContext):void
            }
        }
    }
    package setter{
        package setter.ajax {
            class AnswerSubmitter {
                execute(req:RequestContext,resResponseContext):void
            }
            class QuizCreator {
                execute(req:RequestContext,resResponseContext):void
            }
            class QuizDeleter {
                execute(req:RequestContext,resResponseContext):void
            }
        }
        class NickNameUpdater {
            execute(req:RequestContext,resResponseContext):void
        }
        class PasswordUpdater {
            execute(req:RequestContext,resResponseContext):void
        }
    }
    class Login{
        + execute(req:RequestContext,resResponseContext):void
    }
    class Logout{
        + execute(req:RequestContext,res:ResponseContext):void
    }
    class Signup{
        + execute(req:RequestContext,res:ResponseContext):void
    }
    Service <|-- AnswerHistoryGetter
    Service <|-- CreateHistoryGetter
    Service <|-- GenreGetter
    Service <|-- NicknameGetter
    Service <|-- QuizListGetter
    Service <|-- QuizQuestionGetter
    Service <|-- UserIdChecker
    Service <|-- AnswerSubmitter
    Service <|-- QuizCreator
    Service <|-- QuizDeleter
    Service <|-- NickNameUpdater
    Service <|-- PasswordUpdater
    Service <|-- Login
    Service <|-- Logout
    Service <|-- Signup
}

@enduml